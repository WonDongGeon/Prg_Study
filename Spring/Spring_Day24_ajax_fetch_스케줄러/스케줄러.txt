##스케쥴러 등록
(1)일반객체를 생성
public class ScheduledWork {
public ScheduledWork() {
System.out.println("*******스케줄러 객체 실행******");
}
int i=1;

public void work1() {
System.out.println("scheduled execute : "+ (i++));
}
}
(2)스케쥴러를 등록
@Component - 빈생성

<!-- 설정파일에서 스케쥴러 등록 namespace : task 상자체크-->
<context:component-scan base-package="schedule"/>
<task:scheduled-tasks>
<task:scheduled ref="scheduledWork"
 method="work1" cron="0/5 * * * * ?"/>
</task:scheduled-tasks> 

(3)스케쥴러 등록을 어노테이션으로 처리
함수위에 스케줄러 등록
//autowired같은 역할이므로 annotaiton-driven선언
@Scheduled(cron="0/5 * * * * ?")
<task:annotation-driven/>


완성된 소스코드
package schedule;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ScheduledWork {
	 
	public ScheduledWork() {
		System.out.println("*******스케줄러 객체 실행******");
	}
	int i=1;

	//autowired같은 역할이므로 annotaiton-driven선언
	@Scheduled(cron="0/5 * * * * ?")
	public void work1() {
		System.out.println("scheduled execute : "+ (i++));
	}
}

Cron 표현식의 각 시간단위는 아래의 범위로 구성이 됩니다.
초        분         시	     일       월     요일     년도
0 ~ 59 0 ~ 59 0 ~ 23 1 ~ 31 1 ~ 12 0 ~ 6   *생략가능*

Cron 표현식 특수문자
* : 모든 값(매시, 매일, 매주처럼 사용한다.)
? : 특정 값이 아닌 어떤 값이든 상관 없음
- : 범위를 지정할 때
, : 여러 값을 지정할 때
/ : 증분값, 즉 초기값과 증가치를 설정할 때
L : 지정할 수 있는 범위의 마지막 값 표시
W : 가장 가까운 평일(weekday)을 설정할 때
# : N번 째 특정 요일을 설정할 때

예제
매 10분마다 0 0/10 * * * *
매 3시간마다 0 0 0/3 * * *
2018년도 매일 14시 30분마다 0 30 14 * * * 2018
매일 10시 ~ 19시 사이에 10분 간격으로 0 0/10 10-19 * * *
매일 10시와 19시에만 10분 간격으로 0 0/10 10,19 * * *
매달 25일 01시 30분에 0 30 1 25 * *
매주 월, 금요일 10시와 19시 사이 10분마다 0 10 10-19 ? * MON,FRI
매달 마지막날 15시 30분 0 30 15 L * *
2017~2018년 매월의 마지막 토요일 오후 1시 20분 0 20 13 ? * 6L 2017-2018

미션)시나리오
http://192.168.0.10:8080/restapi/members의 JSON데이터 접속하여 확인
192.168.0.10 host 내용을 들고 와서 나의 데이터베이스를 업데이트 처리
스케쥴러를 등록하여 자동으로 함수가 실행되도록 처리(5초마다)
추가사항)만약 데이터가 변경이 되지 않았을 때 업데이트 처리가 안되도록 설계