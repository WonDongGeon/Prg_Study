클래스는 생성자, 소멸자가 기본으로 존재한다.
생성자 : 클래스명과 같은 이름 가진 함수
소멸자 : finalize() (ex c++ ~함수명())

네트워크, db, 파일관련 함수 close()함수는 소멸자 역할 대신
getInstance(), create(), init(), .. get관련 여러가지 함수 존재, 시작하는 역할

리스너함수(이벤트)
동작이 이루어질 때 앞, 뒤로 실행되는 함수 존재
예) exe()함수를 실행한다고 가정할 떄
exe()만 실행했는데 이때
사전에 실행되는 함수 beforeExe(),
사후에 실행되는 함수 afterExe()
이에 해당하는 기술 proxy, aop이며 이는 메인코드 앞과 뒤에 코드를 추가해주는 기능

##websocket에서 실행순서
1)서버실행시에 아래 함수 실행
afterPropertiesSet() : InitializingBean 인터페이스의 메서드 구현되는 함수 afterConnectionEstablished

2)클라이언트가 최초 접속시
afterConnectionEstablished : 연결되었을 때
supportsPartialMessages() : 부분 메시지 실행

3)연결 후에 메시지를 보낼 때
handleTextMessage : 메시지 수진할 때

4)새로고침, 소켓을 종료할 때
afterConnectionClosed : 연결 종료시

afterPropertiesSet함수는 한번 실행되고 무한반복하면서 메시지를 실시간으로 보내는 역할
클라이언트가 메시지를 보내면 전역변수에 메시지를 저장하는 함수(handlerTextMessage)에서 처리
메시지를 단순히 전역변수에 저장하고 처리는
afterPropertiesSet함수내의 무한반복하는 Thread함수가 메시지를 계속 전송하게됨.
이로서 메시지를 실시간으로 처리하게됨.

문제점은 무한반복하면 부하가 계속 걸리게 됨.
이를 해결하기 위해 메시지가 도착했을 때만 처리하도록 이벤트처리

쓰레드로 처리하는 이유는 비동기식 처리
비동기 처리는 여러를 동시에 실행할 수 있음.
만약에 동기식(순서)으로 처리하면 다른 작업은 중지된 상태이므로 비효율적으로 처리됨.