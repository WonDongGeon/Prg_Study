owasp 보안사항
1. 깨진 접근 제어(Broken Access Control)
모든 애플리케이션에는 액세스 제어가 필요합니다. 이는 사용자가 리소스에만 액세스하고 허용된 작업만 수행하도록 제한합니다. 하지만 공격자는 개발자가 특정 문을 열어 두면 이러한 제한을 우회할 수 있습니다.  

이 중 하나는 권한 확인이 누락되었거나 부적절하다는 것입니다. 사용자 권한이 제한되지 않으면 다른 사용자 계정에 액세스하거나, 제한된 파일을 보거나, 권한이 없는 관리 작업을 수행하는 등의 작업을 수행할 수 있습니다. 

역할 기반 액세스 제어(RBAC)를 사용하여 역할과 위치를 명확하게 정의하고 사용자가 역할에 필요한 리소스와 기능에만 액세스할 수 있도록 합니다. 또한 최소 권한 원칙을 사용해야 합니다. 즉, 사용자에게 해야 할 일을 하는 데 필요한 최소한의 액세스 권한을 부여하는 것입니다. 비슷하게 들릴 수 있지만 미묘한 차이가 있습니다. RBAC는 특정 기능을 관리자 역할로 제한할 수 있지만, 예를 들어 모든 관리자가 동일하지 않으므로 일부 관리자의 권한을 추가로 제한할 수 있는 범위가 있을 수 있습니다. 어느 경우든 이러한 제어는 주기적으로 검토하고 테스트해야 합니다. 

손상된 액세스 제어의 또 다른 예는 IDOR(Insecure Direct Object References)입니다. 애플리케이션이 데이터베이스 레코드나 파일과 같은 객체에 액세스하기 위해 사용자 입력을 요청하면 이러한 요청을 검증하지 않고 공격자는 이러한 참조를 조작하여 무단 액세스를 얻을 수 있습니다. 예를 들어, 사용자가 자신의 프로필을 볼 때 애플리케이션은 다음과 같은 URL을 생성할 수 있습니다.

https://forinstance.org/userprofiles/123

공격자는 URL의 123이 자신의 프로필 레코드를 직접 참조한다고 추측하고(따라서 '직접 객체 참조') 124, 125 등을 시도하여 다른 사용자의 레코드에 잠재적으로 액세스할 수 있습니다. 앱은 사용자에게 이를 수행할 권한이 있는지 확인해야 하지만 권한이 없으면 공격자는 자유롭게 행동할 수 있습니다. 이 취약성을 완화하려면 공격자가 추측하거나 조작하기 어려운 매핑이나 토큰과 같은 간접 객체 참조를 사용하세요.

2. 암호화 실패(Cryptographic Failures)
암호화는 모든 종류의 민감한 정보를 보호하며, 다양한 이유로 실패가 발생할 수 있습니다. 앱이 암호화된 네트워크(예: HTTPS 대신 HTTP 사용)를 통해 데이터를 전송하거나 신용카드 번호나 비밀번호와 같은 민감한 정보가 일반 텍스트로 저장되면 취약해집니다. 마찬가지로 앱이 MD5나 SHA-1과 같은 오래되거나 안전하지 않은 해싱 알고리즘에 의존하는 경우 공격자는 데이터를 훔치기 쉽습니다. 

암호화 키는 적절하게 생성, 저장, 회전 및 폐기되어야 합니다. 쉽게 발견되고 악용될 수 있으므로 소스 코드에 직접 임베드해서는 안 되며, SSL/TLS 인증서는 중간자 공격(MITM)을 방지하기 위해 즉시 검증되어야 합니다. TLS(전송 계층 보안)는 항상 네트워크를 통해 전송되는 데이터를 암호화하는 데 사용해야 합니다.

저장 중인 데이터와 전송 중인 데이터에 모두 AES-256과 같은 강력한 산업 표준 암호화 알고리즘을 사용하고, bcrypt, scrypt 또는 Argon2와 같은 견고한 해싱 알고리즘을 사용하여 비밀번호를 보호하고, 솔팅(암호화하기 전에 공격에 저항하는 데 도움이 되는 난수 데이터를 추가하는 방법)을 사용하여 비밀번호를 안전하게 보호합니다.

3. 주사(Injection)
주입 공격은 허가되지 않은 사용자 입력이 명령이나 쿼리의 일부로 인터프리터로 전송될 때 발생하는 보안 취약성의 한 유형입니다. 이를 통해 공격자는 악의적인 명령을 실행하거나 허가되지 않은 데이터에 액세스할 수 있습니다. 주입 취약성은 종종 SQL 쿼리, 운영 체제 명령, LDAP 문 또는 XML 파서에서 발견됩니다. 이제 이들은 OWASP 2024에서 현재 3위를 차지하고 있는 이 하나의 포괄적인 용어로 통합되었습니다.

예를 들어, 적절한 정리 없이 사용자 입력이 SQL 쿼리에 부적절하게 포함되면 SQL 주입 공격이 발생할 수 있으며, 공격자는 이를 통해 인증을 우회하고, 데이터를 수정 또는 삭제하거나, 권한을 확대할 수 있습니다. 

주입 공격 에 대한 주요 방어책은 사용자 입력을 정리하고, 매개변수화된 쿼리나 준비된 명령문을 사용하고, 입력 검증을 수행하여 사용자 입력이 기대에 부합하는지 확인하는 것입니다. 

4. 안전하지 않은 디자인(Insecure Design)
이 OWASP 2024 범주에는 구현 단계가 아닌 애플리케이션 구축의 설계 단계에서 도입되는 취약성이 포함됩니다. 이미 언급한 것 중 일부는 사용자 입력을 검증하거나 살균하는 메커니즘을 포함하지 않는 것과 불충분한 사용자 인증 및 권한 부여와 같이 이 범주에 해당합니다. 다른 것으로는 세션 관리가 부족(세션 하이재킹을 유발할 수 있음), 오류 처리 및 로깅이 부족(악의적인 행위자에게 방어에 대한 귀중한 단서를 제공할 수 있음), 데이터 보호가 부족, 핵심 기능에 불필요하게 복잡하거나 필수적이지 않은 기능을 추가하는 것(공격 표면이 더 커질 수 있음)이 있습니다. 마지막으로 위협 모델링이 부족하고 앱의 수명 주기에 테스트를 구축하지 못하는 것이 있습니다. 

5. 보안 오류(Security Misconfiguration)
이러한 취약성은 보안 설정이 제대로 정의되지 않았거나, 구현되지 않았거나, 유지되지 않았을 때 발생합니다. 이는 웹 서버, 애플리케이션 서버, 데이터베이스, 프레임워크, 사용자 지정 코드, 사전 설치된 가상 머신, 컨테이너 또는 스토리지를 포함하여 애플리케이션 스택의 모든 수준에서 발생할 수 있습니다.

예를 들어 기본 사용자 이름 및 비밀번호와 같은 안전하지 않은 기본 구성을 사용하거나 , 모든 필수 보안 제어가 제대로 구현되지 않아 시스템의 일부가 보호되지 않는 불완전한 구성을 사용하거나, 공격자가 악용할 수 있는 프로덕션 단계에서 남은 민감한 디버깅 정보를 사용하는 경우가 있습니다. 

시스템에 보안 패치나 업데이트가 적용되지 않은 경우 알려진 취약점에 노출될 수 있으며, 디렉토리 목록이 허용된 경우 디렉토리 구조와 잠재적으로 중요한 파일이 노출될 수 있습니다.

이러한 문제를 방지하려면 기본 자격 증명을 변경하고, 소프트웨어, 프레임워크, 종속성에 보안 패치를 정기적으로 적용하고, 공격 표면을 줄이는 데 필요한 최소한의 기능만 설치하고, 중요한 정보를 공개하지 않고 오류를 안전하게 처리하도록 애플리케이션을 구성하고, 구성 관리 도구를 사용하여 안전한 설정을 시행하고 유지하고, 정기적인 감사를 수행하고, 최소 권한 원칙을 적용하고 네트워크를 세분화하여 액세스와 노출을 제한합니다.

6. 취약하고 오래된 구성 요소(Vulnerable and Outdated Components)
대부분의 웹사이트는 이제 프레임워크, 라이브러리, 확장 프로그램, 플러그인과 같은 외부 종속성에 의존하고 있으며, 이를 모두 안전하고 최신 상태로 유지하는 것은 곧 엄청난 작업이 될 수 있습니다. 이들 중 어느 것도 맬웨어에 굴복하거나 데이터를 노출시키지 않도록 하는 가장 좋은 방법 중 하나는 Reflectiz와 같은 솔루션을 사용하는 것입니다. 이 솔루션은 취약성을 스캔하고 발견한 취약성을 즉시 알리고, 민감한 데이터를 사용하는 방법을 추적하는 등의 작업을 수행합니다. 

공급업체에서 더 이상 유지 관리 또는 지원하지 않는 오래된 구성 요소 는 보안 업데이트의 이점을 얻지 못하며 악의적인 행위자는 항상 이러한 쉬운 악용을 노립니다. 오래된 라이브러리와 프레임워크도 마찬가지입니다. 패치되지 않은 플러그인이나 확장 기능은 공격자에게 쉬운 '침입'이 되므로 이러한 구성 요소가 최신 상태인지 확인하십시오.

7. 식별 및 인증 실패(Identification and Authentication Failures)
이 범주에는 게이트키핑이 제대로 되지 않은 모든 종류의 실패가 포함되므로 "password"나 "123456"과 같은 약한 비밀번호를 사용하거나 비밀번호를 재사용하는 관행은 공격자가 쉽게 해독할 수 있으므로 피해야 합니다. 정책은 사용자에게 복잡한 비밀번호를 채택하고 자주 변경하도록 요구해야 합니다.

무차별 대입 공격은 인증 문제입니다. 공격자가 모든 가능한 조합을 시도하여 비밀번호를 추측하는 경우이며, 비밀번호가 약하면 효과가 있을 수 있습니다. 특정 횟수의 로그인 시도 실패 후 계정 잠금 메커니즘을 적용하고 CAPTCHA를 사용하여 인간 사용자와 자동화된 스크립트를 구별하면 이를 방지할 수 있습니다.

주의해야 할 또 다른 것은 자격 증명 스터핑으로, 공격자가 도난된 사용자 이름과 비밀번호 목록을 사용하여 다양한 웹사이트에 로그인을 시도하는 것입니다. 다중 요소 인증(MFA)으로 이 전술에 대응할 수 있으며, 이는 보안 계층을 추가하여 공격자가 올바른 자격 증명을 가지고 있더라도 무단 액세스를 얻기 어렵게 만듭니다.

8. 소프트웨어 및 데이터 무결성 실패(Software and Data Integrity Failures)
이 범주에는 소프트웨어 및 데이터의 부적절한 검증과 관련된 위험이 포함되는데, 이는 둘 다 무단 변경이나 손상으로부터 적절하게 보호되지 않는 상황을 의미합니다. 

취약성의 일반적인 예로는 안전하지 않은 소프트웨어 업데이트, 코드 서명 부족, 무균화된 데이터 입력 등이 있습니다. 공격자는 이를 악용하여 소프트웨어나 데이터를 수정할 수 있으므로 이를 완화하기 위해 조직은 소프트웨어 업데이트에 대한 강력한 검증 검사를 구현하고, 코드 서명을 사용하여 진위성을 보장하고, 소프트웨어와 데이터의 무결성을 정기적으로 감사하고 모니터링해야 합니다. 

9. 보안 로깅 및 모니터링 실패(Security Logging and Monitoring Failures)
이 범주는 보안 이벤트의 부적절한 로깅 및 모니터링과 관련된 위험에 초점을 맞춥니다. 모든 인시던트의 자세한 로깅, 중앙 집중식 로그 관리 및 의심스러운 활동에 대한 로그 모니터링 없이는 강력한 보안 태세를 유지하기 어렵습니다. Reflectiz는 이러한 종류의 보안 이벤트에 대한 지속적인 모니터링 및 보고를 통해 이러한 요구 사항 중 일부를 충족하는 데 도움이 됩니다.

10. 서버 측 요청 위조( Server-Side Request Forgery (SSRF))
이것은 공격자가 서버에서 내부 또는 외부 리소스로 요청을 할 수 있는 취약성에 대한 것입니다. 이는 웹 애플리케이션이 사용자 제어 입력을 수락하고 적절한 검증이나 제한 없이 요청을 하는 데 사용할 때 발생합니다.

SSRF와 관련된 일반적인 취약점에는 제한 없는 URL 액세스, 부적절한 입력 검증 및 보호된 내부 서비스에 액세스할 수 있는 기능이 포함됩니다. 성공하면 공격자는 민감한 내부 시스템과 상호 작용하거나 기밀 데이터에 액세스하거나 서버 환경을 조작할 수 있습니다.

다시 한번, 이는 허용된 URL만 처리되도록 보장하기 위해 엄격한 입력 검증이 필요하다는 것을 강조합니다. 조직은 또한 서버가 내부 리소스에 액세스하는 기능을 제한하고 네트워크 세분화를 사용하여 민감한 서비스를 보호해야 합니다. 

OWASP 2025의 다음 단계는 무엇인가?
OWASP 2024는 많은 수의 웹 앱을 사용하는 데 따른 가장 어려운 취약성 중 일부를 퇴치하는 데 유용한 가이드를 제공하며, Reflectiz를 사용하면 이러한 취약성 중 많은 부분을 관리할 수 있습니다. 잠시 수정 구슬을 들여다보면 업데이트된 목록이 나오면 공급망 공격과 관련된 취약성이 별도의 범주로 분류되는 것을 보고도 놀라지 않을 것입니다. API 사용이 계속 증가함에 따라 손상된 개체 수준 권한 부여 및 과도한 데이터 노출과 같은 위협으로부터 API를 보호하려면 API 관련 제목이 적절할 수 있습니다. AI 지원 맬웨어 와 관련된 내용이 있을 수 있으며, 현재 많은 애플리케이션이 클라우드로 이전되었다는 점을 감안할 때 잘못 구성된 스토리지 버킷과 같은 클라우드 관련 취약성과 관련된 내용도 있을 수 있습니다. 


----추가적인 설명
1. Injection(인젝션)  SQL, OS, XXE(Xml eXternal Entity), LDAP 인젝션 취약점은 신뢰할 수 없는 데이터가 명령어나 쿼리문의 일부분이 인터프리터로 보내질때 발생합니다. 공격자의 악의적인 데이터는 예상하지 못하는 명령을 실행하거나 적절한 권한 없이 데이터에 접근하도록 인터프리터를 속일 수 있습니다.

2. Broken Authentication and Session Management(인증 및 세션 관리 취약점)  인증과 세션 관리와 관련된 애플리케이션 기능이 정확하게 구현되어 있지 않아서, 공격자가 패스워드, 키 또는 세션 토큰을 해킹하거나 다른 구현 취약점을 공격하여 다른 사용자 계정을 일시적 또는 영구적으로 탈취하는 것을 허용합니다.

3. Cross-Site Scripting (XSS) (크로스 사이트 스크립팅)  XSS 취약점은 애플리케이션이 신뢰할 수 없는 데이터를 가져와 적절한 검증이나 제한 없이 웹브라우저로 보낼때 발생합니다. XSS는 공격자가 피해자의 브라우저에 스크립트를 실행하여 사용자 세션 탈취, 웹사이트 변조, 악의적인 사이트로 이동할 수 있습니다.

4. Broken Access Control (취약한 접근 제어)  취약한 접근 제어는 인증된 사용자가 수행할 수 있는 것에 대한 제한이 제대로 적용되지 않는 것을 의미합니다. 공격자는 이러한 취약점을 악용하여 사용자의 계정 액세스, 중요한 파일 보기, 사용자의 데이터 수정, 액세스 권한 변경 등과 같은 권한 없는 기능, 또는 데이터에 액세스할 수 있습니다.

5. Security Misconfiguration (보안 설정 오류)  훌륭한 보안은 애플리케이션, 프레임워크, 애플리케이션 서버, 웹 서버, 데이터베이스 서버 및 플랫폼에 대해 보안 설정이 정의되고 적용되어 있습니다. 기본으로 제공되는 값은 종종 안전하지 않기 때문에 보안 설정은 정의, 구현 및 유지되어야 합니다. 또한 소프트웨어는 최신의 상태로 유지해야 합니다.

6. Sensitive Data Exposure (민감 데이터 노출)  많은 웹 애플리케이션들이 신용카드, 개인 식별 정보 및 인증 정보와 같은 중요한 데이터를 제대로 보호하지 않습니다. 공격자는 신용카드 사기, 신분 도용 또는 다른 범죄를 수행하는 등 약하게 보호된 데이터를 훔치거나 변경할 수 있습니다. 중요 데이터가 저장 또는 전송 중이거나 브라우저와 교환하는 경우 특별히 주의하여야 하며, 암호화와 같은 보호조치를 취해야 합니다.

7. Insufficient Attack Protection (공격 방어 취약점)  대부분의 애플리케이션과 API는 수동 및 자동화된 공격을 모두 탐지(detect), 방지(prevent), 대응(respond)할 수 있는 기본 기능이 부족합니다. 공격 방어(protection)는 기본적인 입력 유효성 검사를 뛰어 넘어 자동으로 탐지, 로깅, 응답 및 공격 시도 차단을 포함합니다. 애플리케이션 소유자는 공격으로부터 보호하기 위해 패치를 신속하게 배포할 수 있어야 합니다.

8. Cross-Site Request Forgery (CSRF) (크로스 사이트 요청 변조)  CSRF 공격은 로그온 뒤 피해자의 취약한 웹 애플리케이션에 피해자의 세션 쿠키와 기타 다른 인증정보를 자동으로 포함하여 위조된 HTTP 요청을 강제로 보내도록 하는 것입니다. 이것은 공격자가 취약한 애플리케이션이 피해자로부터의 정당한 요청이라고 오해할 수 있는 요청들을 강제로 만들 수 있습니다.

9. Using Components with Known Vulnerabilities (알려진 취약점이 있는 컴포넌트 사용)  컴포넌트, 라이브러리, 프레임워크 및 다른 소프트웨어 모듈은 대부분 항상 전체 권한으로 실행됩니다. 이러한 취약한 컴포넌트를 악용하여 공격하는 경우 심각한 데이터 손실이 발생하거나 서버가 장악됩니다. 알려진 취약점이 있는 컴포넌트를 사용하는 애플리케이션은 애플리케이션 방어 체계를 손상하거나, 공격 가능한 범위를 활성화 하는 등의 영향을 미칩니다.

10. Underprotected APIs (취약한 API)  최신 애플리케이션 및 API에는 API(SOAP / XML, REST / JSON, RPC, GWT 등)에 연결하는 브라우저 및 모바일 애플리케이션의 자바스크립트와 같은 여러 클라이언트 애플리케이션이 포함되는 경우가 많습니다. 이러한 API는 대부분 보호되지 않으며 수많은 취약점을 포함합니다.

- insecure deserialization(안전하지 못한 역질렬화)
insecure:불안정한, 안전하지 못한 (↔secure)
직렬화를 통해 객체를 스트림으로 변환 후 파일등으로 변환하여 사용가능
필터를 사용하여 객체를 제한하거나 변수의 사용을 transient를 사용하여 직렬화를 제외
- 필터를 사용하여 객체를 제한
 ObjectInputFilter filter 
            = ObjectInputFilter.Config.createFilter(
                "serialization.SafeObject;!*" //패키지명까지 일치해야 보안통과
 );
-transient를 사용하여 직렬화를 제외
private String transient name;

-vulnerable componets(취약점 컴포넌트-2024-6번)
최신버전으로 라이브러리 업데이트
vulnerable componets 보안에서 라이브러리 최신으로 할 경우와 그렇지 않은 경우의 자바코드 예시

owasp top10에 대한 자바코드로 취약한 코드와 보안된 예시를 간단하게 작성해줘



