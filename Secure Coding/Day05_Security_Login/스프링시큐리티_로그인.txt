##스프링프로젝트 작성(컴파일 maven 또는 gradle을 선택)

##라이브러리:spring web,jdbc api, data jdbc, data jpa,h2,lombok,security,thymeleaf,devtools

spring web : controller등의 mvc모델 지원라이브러리
jdbc api, data jdbc, data jpa : db처리라이브러리
h2 database : db server
lombok : get, set 지원
security :  로그인, 로그아웃처리
thymeleaf : 레이아웃/템플릿엔진(화면)
devtools:수정된 소스코드에 대해 프로젝트를 자동으로 리로드
추가적으로 필요한 라이브러리 : log4j
<!-- 로그파일 -->

#application.propeties : db서버 db접속정보, jpa활용을 위한 정보
org.hibernate.dialect.OracleDialect
org.hibernate.dialect.H2Dialect
org.hibernate.dialect.PostgreSQLDialect
org.hibernate.dialect.MySQL8Dialect
org.hibernate.dialect.MariaDBDialect

##http://localhost:8080/h2-console db접속하면 페이지제한
이에 관련된 사항은 security사항
접속url관리, 로그인, 로그아웃
##설정파일로 제어함
xml파일로 관리 - > spring  boot config파일을 사용
config파일=@Configuration
@EnableWebSecurity : security설정활성화
@Bean : 객체생성
HttpSecurity http;
http.authorizeHttpRequests().csrf().headers().formLogin().logout();
(a)->a.func().permitAll()
.formLogin((login)->login.loginPage().defaultSuccessUrl().failureUrl(());

로그인을 할 때 1234패스워드를 입력받은 경우 암호화해서 데이터베이스에 암호화된 내용과 확인을 해야하므로 생성
@Bean
PasswordEncoder passwordEncoder() {
return new BCryptPasswordEncoder();
}

또다른 설정파일이 있을 경우 클래스를 작성한 후 @Configuration를 클래스 위에 작성하여 사용하면 자동 로드됨.


## @Autowired를 대신하여 사용하는 어노테이션
@RequiredArgsConstructor
final SiteUserResposity resp; @Autowired없이 자동으로 주입됨
final이 없을 경우 오류가 발생하는 경우가 있음

##회원가입(시큐리티와 관련성이 없음)
폼에서 데이터를 객체로 가져올 때 파라메다에 입력되는 경우
데이터가 있는지 여부를 확인하는 유효성 검사
@NotBlank(message = "이메일은 필수 항목입니다.")
@Email(message = "이메일 형식에 맞지 않습니다.")
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>

##로그인(시큐리티와 관련성이 있음)
controller에서 get방식의  login폼을 활성화하는 코드만 작성
post방식은 시큐리티가 처리함
시큐리티 설정파일에서 
.formLogin((formLogin) -> formLogin
.loginPage("/login") : 이동할 로그인 페이지 url
.defaultSuccessUrl("/") : 성공했을 때
.usernameParameter("email") :파라메다가 username이 아닐경우
.failureUrl("/login")) :실패할 경우

위의코드에서는 post방식을 처리할 부분이 보이지 않는다.
어디서 처리하는 것인가?
login(get)-controller(post)-service-jpa

service의 역할은 UserSecurityService
UserSecurityService에서 final SiteUserResposity resp; jpa
spring boot security에서 로그인시 컨트롤 역할은 어떻게 수행되는가?
SecurityFilterChain 필터에서 controller역할을 대신하고 있음

public UserDetails loadUserByUsername(String email){
return new User(); =>UserDetails에 속한 User이므로 인터페이스나 또는 자식/부모관계 가능성
}
new User();는 비밀번호가 일치하면 User객체를 반환을 하고 그렇지 않으면 null을 반환

email을 폼으로부터 전달받고
나의 데이터베이스(jpa)로 부터 폼으로부터 전달받은  email을 이용하여 패스워드를 얻은 후(객체로 얻음)
스프링 시큐리티에서 User객체에 db로 받은 email, password를 입력하면
폼의 값과 db값이 일치할 경우  스프링시큐리티에서 지원하는 User객체 반환, 그렇지 않으면 null반환
User 객체 == UserDetails 객체

SecurityFilterChain ->UserDetailsService -> User ->UserDetails
1. 인증(Authentication/로그인) 관련 클래스 및 인터페이스
Authentication: 현재 사용자의 인증 정보를 나타내는 핵심 인터페이스. SecurityContextHolder에 저장
AuthenticationManager: 인증 프로세스를 관리하는 메인 인터페이스
ProviderManager: AuthenticationManager의 가장 일반적인 구현체로, 여러 AuthenticationProvider를 관리
AuthenticationProvider: 실제 인증 로직을 수행하는 인터페이스. DaoAuthenticationProvider가 가장 흔한 구현체
UsernamePasswordAuthenticationToken: 사용자 이름과 비밀번호를 담는 Authentication의 구현 클래스
UserDetails: UserDetailsService가 반환하는 객체로, 사용자의 핵심 정보(비밀번호, 권한 등)를 담고 있음
User: UserDetails의 기본 구현 클래스
UserDetailsService: 사용자 이름으로 UserDetails 객체를 조회하는 서비스 인터페이스
PasswordEncoder: 비밀번호를 안전하게 암호화하고 검증하는 데 사용되는 인터페이스
**BCryptPasswordEncoder**가 대표적.
SecurityContextHolder: Authentication 객체를 저장하여 어디서든 접근할 수 있게 하는 정적(static) 클래스.

2. 인가(Authorization/권한 역할) 및 설정 관련 클래스
SecurityFilterChain: HTTP 요청에 대한 보안 필터 체인을 정의하는 클래스입니다. 스프링 부트 2.7+에서 권장되는 설정 방식입니다.
WebSecurityConfigurerAdapter: (스프링 부트 2.7 미만) 웹 보안을 커스터마이징하기 위한 추상 클래스입니다. 현재는 사용하지 않는 것이 권장됩니다.
HttpSecurity: HTTP 보안 설정(요청 규칙, 로그인, 로그아웃 등)을 구성하는 클래스입니다.
GrantedAuthority: 사용자에게 부여된 권한을 나타내는 인터페이스입니다. **SimpleGrantedAuthority**가 가장 많이 사용됩니다.
AuthorizationManager: 인가 결정을 내리는 새로운 인터페이스입니다.
MethodSecurityConfiguration: 메소드 수준 보안(예: @PreAuthorize)을 활성화하고 설정하는 클래스입니다.

3. 필터(Filter) 관련 클래스
DelegatingFilterProxy: 서블릿 컨테이너의 필터와 스프링의 빈 필터를 연결하는 역할을 합니다.
FilterChainProxy: 스프링 시큐리티의 모든 보안 필터들을 묶어 체인으로 관리하는 클래스입니다.
UsernamePasswordAuthenticationFilter: 로그인 폼 제출을 가로채서 인증을 시작하는 필터입니다.
BasicAuthenticationFilter: HTTP Basic 인증 헤더를 처리하는 필터입니다.
LogoutFilter: 로그아웃 요청을 처리하는 필터입니다

반환된 UserDetails객체를 이용하여 jwttoken을 생성하여 front, back을 구분하여 처리하는 인증으로 사용함

chatgpt)자바에서 jwt token생성하는 코드 작성

사이트 참조
https://kouzie.github.io/springboot/Spring-Boot-Security/#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0--jwt

문제)스프링 시큐리티를 이용하여 jwt token을 발급받은 후 jwttoken.html에 발급받은 토큰을 콘솔에서 확인하시오.



